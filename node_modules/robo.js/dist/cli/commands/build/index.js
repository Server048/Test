import { Command } from '../../utils/cli-handler.js';
import { generateManifest } from '../../utils/manifest.js';
import { Logger, logger } from '../../../core/logger.js';
import { loadConfigPath, loadConfig } from '../../../core/config.js';
import { getProjectSize, printBuildSummary } from '../../utils/build-summary.js';
import plugin from './plugin.js';
import path from 'node:path';
import { Env } from '../../../core/env.js';
import { Mode, setMode } from '../../../core/mode.js';
import { findCommandDifferences, registerCommands } from '../../utils/commands.js';
import { generateDefaults } from '../../utils/generate-defaults.js';
import { Compiler } from '../../utils/compiler.js';
import { prepareFlashcore, Flashcore } from '../../../core/flashcore.js';
import { color, bold } from '../../../core/color.js';
import { buildPublicDirectory } from '../../utils/public.js';
import { discordLogger, FLASHCORE_KEYS } from '../../../core/constants.js';

const command = new Command("build").description("Builds your bot for production.").option("-d", "--dev", "build for development").option("-f", "--force", "force register commands").option("-m", "--mode", "specify the mode(s) to run in (dev, beta, prod, etc...)").option("-s", "--silent", "do not print anything").option("-v", "--verbose", "print more information for debugging").option("-w", "--watch", "watch for changes and rebuild").option("-h", "--help", "Shows the available command options").handler(buildAction).addCommand(plugin).positionalArgs(true);
var build_default = command;
async function buildAction(files, options) {
  const loggerOptions = {
    enabled: !options.silent,
    level: options.verbose ? "debug" : options.dev ? "warn" : "info"
  };
  const logger$1 = options.dev ? new Logger(loggerOptions) : logger(loggerOptions);
  logger$1.info(`Building Robo...`);
  logger$1.debug("CLI parameters:", files);
  logger$1.debug("CLI options:", options);
  logger$1.debug(`Current working directory:`, process.cwd());
  const startTime = Date.now();
  if (options.watch) {
    logger$1.error(`Watch mode is only available for building plugins.`);
    process.exit(1);
  }
  if (!process.env.NODE_ENV) {
    process.env.NODE_ENV = options.dev ? "development" : "production";
  }
  const defaultMode = Mode.get();
  await Env.load({ mode: defaultMode });
  const { shardModes } = setMode(options.mode);
  if (shardModes) {
    logger$1.error(`Mode sharding is not available for builds.`);
    process.exit(1);
  }
  const configPath = await loadConfigPath();
  if (configPath?.includes(".config")) {
    logger$1.warn(
      `The ${color.bold(".config")} directory is deprecated. Use ${color.bold("config")} instead. (without the dot)`
    );
  }
  const config = await loadConfig("robo", true);
  if (!config) {
    logger$1.warn(`Could not find configuration file.`);
  }
  await prepareFlashcore();
  const compileTime = await Compiler.buildCode({
    distDir: config.experimental?.buildDirectory,
    excludePaths: config.excludePaths?.map((p) => p.replaceAll("/", path.sep)),
    files
  });
  logger$1.debug(`Compiled in ${compileTime}ms`);
  const generatedFiles = await generateDefaults(config.experimental?.buildDirectory);
  const oldManifest = await Compiler.useManifest({ safe: true });
  const manifestTime = Date.now();
  const manifest = await generateManifest(generatedFiles, "robo");
  logger$1.debug(`Generated manifest in ${Date.now() - manifestTime}ms`);
  if (!options.dev) {
    await buildPublicDirectory();
    const sizeStartTime = Date.now();
    const totalSize = await getProjectSize(process.cwd());
    logger$1.debug(`Computed Robo size in ${Date.now() - sizeStartTime}ms`);
    printBuildSummary(manifest, totalSize, startTime, false);
  }
  const oldCommands = oldManifest.commands;
  const newCommands = manifest.commands;
  const addedCommands = findCommandDifferences(oldCommands, newCommands, "added");
  const removedCommands = findCommandDifferences(oldCommands, newCommands, "removed");
  const changedCommands = findCommandDifferences(oldCommands, newCommands, "changed");
  const hasCommandChanges = addedCommands.length > 0 || removedCommands.length > 0 || changedCommands.length > 0;
  const oldContextCommands = { ...oldManifest.context?.message ?? {}, ...oldManifest.context?.user ?? {} };
  const newContextCommands = { ...manifest.context.message, ...manifest.context.user };
  const addedContextCommands = findCommandDifferences(oldContextCommands, newContextCommands, "added");
  const removedContextCommands = findCommandDifferences(oldContextCommands, newContextCommands, "removed");
  const changedContextCommands = findCommandDifferences(oldContextCommands, newContextCommands, "changed");
  const hasContextCommandChanges = addedContextCommands.length > 0 || removedContextCommands.length > 0 || changedContextCommands.length > 0;
  const shouldRegister = options.force || hasCommandChanges || hasContextCommandChanges;
  if (config.experimental?.disableBot !== true && options.force) {
    discordLogger.warn("Forcefully registering commands.");
  }
  if (config.experimental?.disableBot !== true && shouldRegister) {
    await registerCommands(
      options.dev,
      options.force,
      newCommands,
      manifest.context.message,
      manifest.context.user,
      changedCommands,
      addedCommands,
      removedCommands,
      changedContextCommands,
      addedContextCommands,
      removedContextCommands
    );
  } else if (config.experimental?.disableBot !== true) {
    const hasPreviousError = await Flashcore.get(FLASHCORE_KEYS.commandRegisterError);
    if (hasPreviousError) {
      discordLogger.warn(`Previous command registration failed. Run ${bold("robo build --force")} to try again.`);
    }
  }
  if (options.exit ?? !options.dev) {
    process.exit(0);
  }
}

export { buildAction, build_default as default };
