{"version":3,"sources":["../../src/core/globals.ts"],"names":["instanceId","Globals","config","adapter","apis","commands","context","events","middleware","moduleKeys","api","command","event","handler"],"mappings":"AAYA,MAAMA,EAAa,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,MAAM,CAAC,EAExCC,EAAU,CACtB,UAAW,KACL,WAAW,MACfA,EAAQ,KAAK,EAGP,WAAW,KAAK,QAExB,oBAAqB,KACf,WAAW,MACfA,EAAQ,KAAK,EAGP,WAAW,KAAK,UAAU,UAElC,gBAAiB,KACX,WAAW,MACfA,EAAQ,KAAK,EAGP,CACN,KAAM,WAAW,KAAK,OAAO,KAC7B,SAAU,WAAW,KAAK,OAAO,SACjC,QAAS,WAAW,KAAK,OAAO,QAChC,OAAQ,WAAW,KAAK,OAAO,OAC/B,WAAY,WAAW,KAAK,OAAO,WACnC,WAAY,WAAW,KAAK,OAAO,UACpC,GAED,KAAM,IAAM,CACX,WAAW,KAAO,CACjB,OAAQ,KACR,UAAW,CACV,SAAU,IACX,EACA,OAAQ,CACP,KAAM,KACN,SAAU,KACV,QAAS,KACT,OAAQ,KACR,WAAY,CAAC,EACb,WAAY,IAAI,GACjB,CACD,CACD,EACA,WAAAD,EACA,eAAiBE,GAAmB,CAC9B,WAAW,MACfD,EAAQ,KAAK,EAGd,WAAW,KAAK,OAASC,CAC1B,EACA,kBAAoBC,GAA8B,CAC5C,WAAW,MACfF,EAAQ,KAAK,EAGd,WAAW,KAAK,UAAU,SAAWE,CACtC,EACA,eAAgB,CACfC,EACAC,EACAC,EACAC,EACAC,IACI,CACC,WAAW,MACfP,EAAQ,KAAK,EAGd,WAAW,KAAK,OAAO,KAAOG,EAC9B,WAAW,KAAK,OAAO,SAAWC,EAClC,WAAW,KAAK,OAAO,QAAUC,EACjC,WAAW,KAAK,OAAO,OAASC,EAChC,WAAW,KAAK,OAAO,WAAaC,EAGpC,MAAMC,EAAa,IAAI,IACvBL,EAAK,QAASM,GAAQ,CACjBA,EAAI,QACPD,EAAW,IAAIC,EAAI,MAAM,CAE3B,CAAC,EACDL,EAAS,QAASM,GAAY,CACzBA,EAAQ,QACXF,EAAW,IAAIE,EAAQ,MAAM,CAE/B,CAAC,EACDL,EAAQ,QAASA,GAAY,CACxBA,EAAQ,QACXG,EAAW,IAAIH,EAAQ,MAAM,CAE/B,CAAC,EACDC,EAAO,QAASK,GAAU,CACzBA,EAAM,QAASC,GAAY,CACtBA,EAAQ,QACXJ,EAAW,IAAII,EAAQ,MAAM,CAE/B,CAAC,CACF,CAAC,EACDL,EAAW,QAASA,GAAe,CAC9BA,EAAW,QACdC,EAAW,IAAID,EAAW,MAAM,CAElC,CAAC,EACD,WAAW,KAAK,OAAO,WAAa,IAAI,IAAI,CAAC,GAAGC,CAAU,EAAE,KAAK,CAAC,CACnE,CACD","sourcesContent":["import type {\n\tApi,\n\tCommand,\n\tConfig,\n\tContext,\n\tEvent,\n\tFlashcoreAdapter,\n\tHandlerRecord,\n\tMiddleware\n} from '../types/index.js'\nimport type { Collection } from 'discord.js'\n\nconst instanceId = Math.random().toString(36).slice(2)\n\nexport const Globals = {\n\tgetConfig: () => {\n\t\tif (!globalThis.robo) {\n\t\t\tGlobals.init()\n\t\t}\n\n\t\treturn globalThis.robo.config\n\t},\n\tgetFlashcoreAdapter: () => {\n\t\tif (!globalThis.robo) {\n\t\t\tGlobals.init()\n\t\t}\n\n\t\treturn globalThis.robo.flashcore._adapter\n\t},\n\tgetPortalValues: () => {\n\t\tif (!globalThis.robo) {\n\t\t\tGlobals.init()\n\t\t}\n\n\t\treturn {\n\t\t\tapis: globalThis.robo.portal.apis,\n\t\t\tcommands: globalThis.robo.portal.commands,\n\t\t\tcontext: globalThis.robo.portal.context,\n\t\t\tevents: globalThis.robo.portal.events,\n\t\t\tmiddleware: globalThis.robo.portal.middleware,\n\t\t\tmoduleKeys: globalThis.robo.portal.moduleKeys\n\t\t}\n\t},\n\tinit: () => {\n\t\tglobalThis.robo = {\n\t\t\tconfig: null,\n\t\t\tflashcore: {\n\t\t\t\t_adapter: null\n\t\t\t},\n\t\t\tportal: {\n\t\t\t\tapis: null,\n\t\t\t\tcommands: null,\n\t\t\t\tcontext: null,\n\t\t\t\tevents: null,\n\t\t\t\tmiddleware: [],\n\t\t\t\tmoduleKeys: new Set()\n\t\t\t}\n\t\t}\n\t},\n\tinstanceId,\n\tregisterConfig: (config: Config) => {\n\t\tif (!globalThis.robo) {\n\t\t\tGlobals.init()\n\t\t}\n\n\t\tglobalThis.robo.config = config\n\t},\n\tregisterFlashcore: (adapter: FlashcoreAdapter) => {\n\t\tif (!globalThis.robo) {\n\t\t\tGlobals.init()\n\t\t}\n\n\t\tglobalThis.robo.flashcore._adapter = adapter\n\t},\n\tregisterPortal: (\n\t\tapis: Collection<string, HandlerRecord<Api>>,\n\t\tcommands: Collection<string, HandlerRecord<Command>>,\n\t\tcontext: Collection<string, HandlerRecord<Context>>,\n\t\tevents: Collection<string, HandlerRecord<Event>[]>,\n\t\tmiddleware: HandlerRecord<Middleware>[]\n\t) => {\n\t\tif (!globalThis.robo) {\n\t\t\tGlobals.init()\n\t\t}\n\n\t\tglobalThis.robo.portal.apis = apis\n\t\tglobalThis.robo.portal.commands = commands\n\t\tglobalThis.robo.portal.context = context\n\t\tglobalThis.robo.portal.events = events\n\t\tglobalThis.robo.portal.middleware = middleware\n\n\t\t// Generate module keys based off of entries then sort alphabetically\n\t\tconst moduleKeys = new Set<string>()\n\t\tapis.forEach((api) => {\n\t\t\tif (api.module) {\n\t\t\t\tmoduleKeys.add(api.module)\n\t\t\t}\n\t\t})\n\t\tcommands.forEach((command) => {\n\t\t\tif (command.module) {\n\t\t\t\tmoduleKeys.add(command.module)\n\t\t\t}\n\t\t})\n\t\tcontext.forEach((context) => {\n\t\t\tif (context.module) {\n\t\t\t\tmoduleKeys.add(context.module)\n\t\t\t}\n\t\t})\n\t\tevents.forEach((event) => {\n\t\t\tevent.forEach((handler) => {\n\t\t\t\tif (handler.module) {\n\t\t\t\t\tmoduleKeys.add(handler.module)\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t\tmiddleware.forEach((middleware) => {\n\t\t\tif (middleware.module) {\n\t\t\t\tmoduleKeys.add(middleware.module)\n\t\t\t}\n\t\t})\n\t\tglobalThis.robo.portal.moduleKeys = new Set([...moduleKeys].sort())\n\t}\n}\n"]}