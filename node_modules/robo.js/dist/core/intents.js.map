{"version":3,"sources":["../../src/core/intents.ts"],"names":["GatewayIntentBits","portal","discordLogger","bold","REQUIRED_INTENTS","checkIntents","client","missingIntents","events","intents","eventName","requiredBit","bit","intentBitToName","key","value","missingIntentNames"],"mappings":"AAAA,OAAiB,qBAAAA,MAAyB,aAC1C,OAAS,UAAAC,MAAc,YACvB,OAAS,iBAAAC,MAAqB,iBAC9B,OAAS,QAAAC,MAAY,aAEd,MAAMC,EAA4E,CAExF,YAAaJ,EAAkB,OAC/B,YAAaA,EAAkB,OAC/B,YAAaA,EAAkB,OAG/B,cAAeA,EAAkB,OACjC,cAAeA,EAAkB,OACjC,cAAeA,EAAkB,OACjC,kBAAmBA,EAAkB,OAGrC,aAAcA,EAAkB,OAChC,aAAcA,EAAkB,OAChC,aAAcA,EAAkB,OAChC,eAAgBA,EAAkB,OAClC,mBAAoBA,EAAkB,OACtC,oBAAqBA,EAAkB,aAGvC,oBAAqBA,EAAkB,OACvC,oBAAqBA,EAAkB,OACvC,oBAAqBA,EAAkB,OAGvC,eAAgBA,EAAkB,aAClC,kBAAmBA,EAAkB,aACrC,kBAAmBA,EAAkB,aAGrC,yBAA0BA,EAAkB,gBAC5C,YAAaA,EAAkB,gBAC/B,eAAgBA,EAAkB,gBAGlC,kBAAmBA,EAAkB,uBACrC,oBAAqBA,EAAkB,uBAGvC,wBAAyBA,EAAkB,kBAC3C,kBAAmBA,EAAkB,kBACrC,kBAAmBA,EAAkB,kBACrC,kBAAmBA,EAAkB,kBAGrC,eAAgBA,EAAkB,cAClC,aAAcA,EAAkB,aAChC,aAAcA,EAAkB,aAChC,iBAAkBA,EAAkB,iBACpC,eAAgBA,EAAkB,eAGlC,cAAe,CAAKA,EAAkB,cAAeA,EAAkB,cAAe,EACtF,cAAe,CAAKA,EAAkB,cAAeA,EAAkB,cAAe,EACtF,cAAe,CAAKA,EAAkB,cAAeA,EAAkB,cAAe,EACtF,kBAAmBA,EAAkB,cAGrC,mBAAoBA,EAAkB,sBACtC,sBAAuBA,EAAkB,sBACzC,yBAA0BA,EAAkB,sBAC5C,2BAA4BA,EAAkB,sBAG9C,YAAaA,EAAkB,mBAG/B,0BAA2BA,EAAkB,qBAC7C,0BAA2BA,EAAkB,qBAC7C,0BAA2BA,EAAkB,qBAC7C,2BAA4BA,EAAkB,qBAC9C,8BAA+BA,EAAkB,qBAGjD,yBAA0BA,EAAkB,4BAC5C,yBAA0BA,EAAkB,4BAC5C,yBAA0BA,EAAkB,4BAC5C,8BAA+BA,EAAkB,wBAGjD,mBAAoBA,EAAkB,kBACtC,sBAAuBA,EAAkB,iBAC1C,EAEO,SAASK,EAAaC,EAAsB,CAClD,MAAMC,EAAiB,IAAI,IACrBC,EAASP,EAAO,OAAO,KAAK,EAC5BQ,EAAU,OAAOH,EAAO,QAAQ,QAAQ,QAAQ,EAEtD,UAAWI,KAAaF,EAAQ,CAC/B,MAAMG,EAAcP,EAAiBM,CAAS,EACzCC,IAID,MAAM,QAAQA,CAAW,EACVA,EAAY,KAAMC,IAASH,EAAUG,GAAO,CAAC,GAE9DD,EAAY,QAASC,GAAQL,EAAe,IAAIK,CAAG,CAAC,EAE1CH,EAAUE,GACrBJ,EAAe,IAAII,CAAW,GAIhC,GAAIJ,EAAe,OAAS,EAAG,OAE/B,MAAMM,EAAkB,OAAO,YAAY,OAAO,QAAQb,CAAiB,EAAE,IAAI,CAAC,CAACc,EAAKC,CAAK,IAAM,CAACA,EAAOD,CAAG,CAAC,CAAC,EAE1GE,EAAqB,MAAM,KAAKT,CAAc,EAAE,IACpDK,GAAQC,EAAgBD,CAAmC,GAAK,SAClE,EAEAV,EAAc,KAAK,oBAAoBc,EAAmB,IAAK,GAAMb,EAAK,CAAC,CAAC,EAAE,KAAK,IAAI,GAAG,CAC3F","sourcesContent":["import { Client, GatewayIntentBits } from 'discord.js'\nimport { portal } from './robo.js'\nimport { discordLogger } from './constants.js'\nimport { bold } from './color.js'\n\nexport const REQUIRED_INTENTS: Record<string, GatewayIntentBits | GatewayIntentBits[]> = {\n\t// Guild related events\n\tguildCreate: GatewayIntentBits.Guilds,\n\tguildUpdate: GatewayIntentBits.Guilds,\n\tguildDelete: GatewayIntentBits.Guilds,\n\n\t// Channel related events\n\tchannelCreate: GatewayIntentBits.Guilds,\n\tchannelUpdate: GatewayIntentBits.Guilds,\n\tchannelDelete: GatewayIntentBits.Guilds,\n\tchannelPinsUpdate: GatewayIntentBits.Guilds,\n\n\t// Thread related events\n\tthreadCreate: GatewayIntentBits.Guilds,\n\tthreadUpdate: GatewayIntentBits.Guilds,\n\tthreadDelete: GatewayIntentBits.Guilds,\n\tthreadListSync: GatewayIntentBits.Guilds,\n\tthreadMemberUpdate: GatewayIntentBits.Guilds,\n\tthreadMembersUpdate: GatewayIntentBits.GuildMembers,\n\n\t// Stage instance events\n\tstageInstanceCreate: GatewayIntentBits.Guilds,\n\tstageInstanceUpdate: GatewayIntentBits.Guilds,\n\tstageInstanceDelete: GatewayIntentBits.Guilds,\n\n\t// Member related events\n\tguildMemberAdd: GatewayIntentBits.GuildMembers,\n\tguildMemberUpdate: GatewayIntentBits.GuildMembers,\n\tguildMemberRemove: GatewayIntentBits.GuildMembers,\n\n\t// Moderation events\n\tguildAuditLogEntryCreate: GatewayIntentBits.GuildModeration,\n\tguildBanAdd: GatewayIntentBits.GuildModeration,\n\tguildBanRemove: GatewayIntentBits.GuildModeration,\n\n\t// Guild customization events\n\tguildEmojisUpdate: GatewayIntentBits.GuildEmojisAndStickers,\n\tguildStickersUpdate: GatewayIntentBits.GuildEmojisAndStickers,\n\n\t// Integration events\n\tguildIntegrationsUpdate: GatewayIntentBits.GuildIntegrations,\n\tintegrationCreate: GatewayIntentBits.GuildIntegrations,\n\tintegrationUpdate: GatewayIntentBits.GuildIntegrations,\n\tintegrationDelete: GatewayIntentBits.GuildIntegrations,\n\n\t// Other guild events\n\twebhooksUpdate: GatewayIntentBits.GuildWebhooks,\n\tinviteCreate: GatewayIntentBits.GuildInvites,\n\tinviteDelete: GatewayIntentBits.GuildInvites,\n\tvoiceStateUpdate: GatewayIntentBits.GuildVoiceStates,\n\tpresenceUpdate: GatewayIntentBits.GuildPresences,\n\n\t// Message related events\n\tmessageCreate: [...[GatewayIntentBits.GuildMessages, GatewayIntentBits.DirectMessages]],\n\tmessageUpdate: [...[GatewayIntentBits.GuildMessages, GatewayIntentBits.DirectMessages]],\n\tmessageDelete: [...[GatewayIntentBits.GuildMessages, GatewayIntentBits.DirectMessages]],\n\tmessageDeleteBulk: GatewayIntentBits.GuildMessages,\n\n\t// Reaction events\n\tmessageReactionAdd: GatewayIntentBits.GuildMessageReactions,\n\tmessageReactionRemove: GatewayIntentBits.GuildMessageReactions,\n\tmessageReactionRemoveAll: GatewayIntentBits.GuildMessageReactions,\n\tmessageReactionRemoveEmoji: GatewayIntentBits.GuildMessageReactions,\n\n\t// Typing events\n\ttypingStart: GatewayIntentBits.GuildMessageTyping,\n\n\t// Scheduled events\n\tguildScheduledEventCreate: GatewayIntentBits.GuildScheduledEvents,\n\tguildScheduledEventUpdate: GatewayIntentBits.GuildScheduledEvents,\n\tguildScheduledEventDelete: GatewayIntentBits.GuildScheduledEvents,\n\tguildScheduledEventUserAdd: GatewayIntentBits.GuildScheduledEvents,\n\tguildScheduledEventUserRemove: GatewayIntentBits.GuildScheduledEvents,\n\n\t// Auto moderation events\n\tautoModerationRuleCreate: GatewayIntentBits.AutoModerationConfiguration,\n\tautoModerationRuleUpdate: GatewayIntentBits.AutoModerationConfiguration,\n\tautoModerationRuleDelete: GatewayIntentBits.AutoModerationConfiguration,\n\tautoModerationActionExecution: GatewayIntentBits.AutoModerationExecution,\n\n\t// Poll events\n\tmessagePollVoteAdd: GatewayIntentBits.GuildMessagePolls,\n\tmessagePollVoteRemove: GatewayIntentBits.GuildMessagePolls\n}\n\nexport function checkIntents(client: Client): void {\n\tconst missingIntents = new Set<GatewayIntentBits>()\n\tconst events = portal.events.keys() as string[]\n\tconst intents = Number(client.options.intents.bitfield)\n\n\tfor (const eventName of events) {\n\t\tconst requiredBit = REQUIRED_INTENTS[eventName]\n\t\tif (!requiredBit) {\n\t\t\tcontinue // Skip custom events\n\t\t}\n\n\t\tif (Array.isArray(requiredBit)) {\n\t\t\tconst hasAnyBit = requiredBit.some((bit) => (intents & bit) > 0)\n\t\t\tif (!hasAnyBit) {\n\t\t\t\trequiredBit.forEach((bit) => missingIntents.add(bit))\n\t\t\t}\n\t\t} else if ((intents & requiredBit) === 0) {\n\t\t\tmissingIntents.add(requiredBit)\n\t\t}\n\t}\n\n\tif (missingIntents.size === 0) return\n\n\tconst intentBitToName = Object.fromEntries(Object.entries(GatewayIntentBits).map(([key, value]) => [value, key]))\n\n\tconst missingIntentNames = Array.from(missingIntents).map(\n\t\t(bit) => intentBitToName[bit as keyof typeof intentBitToName] ?? 'Unknown'\n\t)\n\n\tdiscordLogger.warn(`Missing intents: ${missingIntentNames.map((i) => bold(i)).join(', ')}`)\n}\n"]}