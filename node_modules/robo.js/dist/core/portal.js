import { Compiler } from './../cli/utils/compiler.js';
import { Collection } from 'discord.js';
import v from 'node:path';
import { pathToFileURL } from 'node:url';
import { hasProperties } from '../cli/utils/utils.js';
import { logger } from './logger.js';
import { composeColors, color, hex } from './color.js';
import { getConfig } from './config.js';
import { Globals } from './globals.js';

class ${_enabledModules={};_modules={};constructor(){}get apis(){return Globals.getPortalValues().apis}get commands(){return Globals.getPortalValues().commands}get context(){return Globals.getPortalValues().context}get events(){return Globals.getPortalValues().events}get middleware(){return Globals.getPortalValues().middleware}get moduleKeys(){return Globals.getPortalValues().moduleKeys}module(o){let n=this._modules[o];return n||(n=new K(o,this._enabledModules),this._modules[o]=n),n}static async open(){const o=await h("api"),n=await h("commands"),s=await h("context"),i=await h("events"),u=[...(await h("middleware")).values()];Globals.registerPortal(o,n,s,i,u);}}class K{constructor(o,n){this._moduleName=o;this._enabledModules=n;}get isEnabled(){return this._enabledModules[this._moduleName]??!0}setEnabled(o){this._enabledModules[this._moduleName]=o;}}function G(e){const n=getConfig().plugins?.find(i=>(typeof i=="string"?i:i[0])===e);return (typeof n=="string"?null:n?.[1])??null}async function p(e,o){const{manifestEntries:n,parentEntry:s={},recursionKeys:i=[],type:u}=o,g=[];for(const w in n){const b=Array.isArray(n)&&u!=="middleware"?n:n[w];(Array.isArray(b)?b:[b]).forEach(a=>{const c=[...i,w],t={...s,...a};if(g.push(e(t,c)),hasProperties(a,["subcommands"])&&a.subcommands){const r=p(e,{manifestEntries:a.subcommands,parentEntry:t,recursionKeys:c,type:u});g.push(r);}else if(hasProperties(a,["subroutes"])&&a.subroutes){const r=p(e,{manifestEntries:a.subroutes,parentEntry:t,recursionKeys:c,type:u});g.push(r);}});}return Promise.all(g)}async function h(e){const o=new Collection,n=Compiler.getManifest(),s=e==="commands"?composeColors(color.blue,color.bold):e==="context"?composeColors(hex("#536DFE"),color.bold):e==="events"?composeColors(color.magenta,color.bold):composeColors(color.gray,color.bold),T=e==="api"?t=>s(`${t}`):e==="commands"?t=>s(`/${t}`):e==="context"?t=>s(`${t} (${t})`):e==="events"?t=>s(`${t} (${n.events[t].length})`):t=>s(n.middleware[parseInt(t)]?.__path),a=Object.keys(n[e]).map(T);logger.debug(`Loading ${e}: ${a.join(", ")}`);const c=async(t,r)=>{if(!t.__path)return;const x=v.join(process.cwd(),t.__plugin?.path??"."),P=pathToFileURL(v.join(x,t.__path)).toString(),f={auto:t.__auto,description:t.description,handler:await import(P),key:r.join("/"),module:t.__module,path:t.__path,plugin:t.__plugin,type:e==="events"?"event":e==="commands"?"command":e};if(e==="events"){const d=r[0];o.has(d)||o.set(d,[]),o.get(d).push(f);}else if(e==="commands"){const d=r.join(" ");o.set(d,f);}else if(e==="context"){const d=r[0];o.set(d,f);}else e==="middleware"?o.set(r[0],f):e==="api"&&o.set(r.join("/"),f);};return e==="context"?(await p(c,{manifestEntries:n.context.message,type:e}),await p(c,{manifestEntries:n.context.user,type:e})):await p(c,{manifestEntries:n[e],type:e}),o}

export { $ as default, G as getPluginOptions };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=portal.js.map